<<Vessel>>

<몸체>
1 사이즈 측정 부터
2 screw로 반 원통 구현
3 두 vertices를 gg이동 & vertex bevel로 둥글화

<뚜껑>
4 duplicate 후 screw삭제로 뚜겅 구현 + mirror
5 extrude로 벽 구현
5 face orientaion on / screw에 normal - flip & solidify 10 (even thickness) at the wall

<중간 확인>
6 언리얼에 임포트 후 크기 확인 / ctrl + e -> 스태틱 메쉬 창, 콜리전 확인

...

<굴곡 주기>
7 vertices와 edges를 g와 gg로 곡선 주며 높이 상승 + 끝 선 잡고 p
8 끝 선을 convert to curve로 add plane mesh 후 얘도, convert to curve로

<특별한 엣지한 두께 주기>
9 끝 선 curve - data - geometry - bevel - object - 스포이드(eyedropper) to the square curve = 끝 선 커브의 네모화

 (curve는 curve끼리만 eyedropping 할 수 있어서, plane을 curve로 했음)

10 geometry - bevel로 연결된 plane curve의 사이즈를 줄이면 끝선 커브도 작아짐.
11 plane curve의 pivot을 바꾸면 끝선 curve도 모양이 바뀜 (pivot 기준으로 geometry - bevel 됨)
12 cursor로 plane curve의 pivot 옮기기 = plane 커브의 두 vertices 선택(=edge 선택) shift + s, move to selected, then set origin to 3d cursor

<굴곡 주기 2>
13 굴곡줄 선을 seperate후 vetex bevel로 깍아삐
14 plane curve를 duplicate 후 조금 더 작게 만들기 = plane curve 2
15 그 선을 p 후 convert to curve 후 특별한 엣지 주기 실행(geometry - bevel - object - eyedropper to plane curve 2)

<디테일한 굴곡 주기 3, 그리고 특별한 엣지한 두께 추가>

16 선 잡고 p, 후 /로 그것만 보고 vertex mode, select all(a)후, m = 끊어진 선 병합
17 vertices bevel로 둥글게

(curve - data - geometry - bevel - fill caps 체크 = 뚜껑 닫기)

18 백업 저장 후, 특별한 엣지한 두께들은 모두 선택 후, convert to mesh 후, /로 집중하고, then ctrl +j로 오브젝트 join
19 특별한 엣지한 두께들의 빨간 face들을 alt + n - recalculate outside (오류난 부분은 l로 선택 후, m + b 후, 다시 alt + n - recalculate outside)

alt + j = 두 삼각형 to 사각형
modifier - bevel 추가 = 각진 것들에 bevel



--

<언리얼에 다시 임포트>

combine static meshes when importing
lit - play collision으로 collision 확인 / collision set complex collision as simple

---

<계단 만들기>

1 chop em out, then split faces by edges
2 set transfrom pivot point as individual origins, then, S+Z to 0 = flatten em
3 solidy it to 10 so that it gets thicker

(mirror - object - execute eyedropper to target object)


---
---
---

<쫓아 오는 ai 놈 만들고 스포너도 만들기>

BP_Enemy AI의 세팅에서, 블루프린트 self의 디테일에서, possess AI 설정을 Placed in World or Spawned를 선택해야, 스폰되어도 이놈의 블루프린트가 다 조종함

<총알 기믹 구현>

add local offset = add delta location (nah don't think it is good)
add impulse
(총알의 경우 pawn도 overlap을 켜주어야 object를 다르게 해도 전부다 통과됨)

<죽은 자의 소생>

set relative transform을 메쉬의 원본 값으로 복구 해야 함


----
----
---

<<Sci-fi room 개선하기>> 

<에어컨 달기>

(가능한 면에서 거의 모든 걸 잡아두고, 두께 부여 및 디테일)

solidify 삭제

면의 subdivide - vertex bevel로 마름모 뚫고 - ctrl + i 로 나머지 선택 후 삭제 후 - mirror

45도 r로 돌려서 일단 정방향으로 작업 후 나중에 원위치

k + a + 45fh 직각 구현

(common problem solver = m + b or normal)

--

convert to mesh = set all modifiers as one

불필요한 면 없애고 , m +b 후, i로 inset 2cm

--

(수직으로 맞닿는 선을 alt로 클릭하면 face 모드에서 모든 연결 face 클릭)

(같은 면만 subdivide시 edge들이 연결 됨)

((일부로 삐딱한 것을 넣어주는 게 자연스러움. 너무 모두 정각이면, 어색하고 긴장감 생김))
((자연광이 있는 곳에 인공광을 굳이 넣으면 너무 밝아짐))

---
---

<전등 구현>

convert to curve - geometry - round = 원통 생성

---

<각종 색칠 후 언리얼에 임포트>

ctrl + '+' = 선택 번지기
(불필요한 숨겨진 부분도 다 그냥 삭제해삐, 최적화)

(천장 면이 빨갛게 보이면, 위에서 빛이 뚫고 들어옴. 그러므로 e(z), then f)

언리얼에서 lit - exposure - ev 수정하면 밝기 조절
임포트 후 컬리전 수정

------

<<라이트의 머티리얼 수정>>

shading moded - unlit
(lit의 과거형 light)


<깜빡이는 전등>
숫자 3 + 왼클릭 = constant vector 추가

sine과 time 노드 이용
깜빡 깜빡 / (발색 특성상, 0~1 거의 검정, 1~50 거의 밝아)


<깜빡이는 전등 개선>

1
convert to parameter 
collapse to node
time with sine
lerp - alpha

2
set scalar parameter in the material 노드

-------

EX)

ctrl + alt - 엣지 = 엣지 잡기

alt - 엣지 = 면 잡기

--

주기적인 행동	Timer를 사용 (SetTimer)
복잡한 순차 로직	State Machine 또는 Behavior Tree 사용
다수의 Delay	구조를 리팩토링해서 가능한 한 줄이기
오브젝트 파괴와 딜레이 동시 사용	IsValid 체크 또는 LatentActionManager 직접 관리



